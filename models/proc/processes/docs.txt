
arch_status
# https://www.phoronix.com/news/Linux-Proc-PID-Arch-Status


attr
# https://man7.org/linux/man-pages/man5/proc.5.html
# A directory containing files detailing SELinux info about a process


autogroup
# https://man7.org/linux/man-pages/man7/sched.7.html
# The kernel scheduler groups related tasks via parent
# lineage and uses this in making scheduling decisions.
# The example given is that all processes in a parrallel
# build via Make are given the same group, so they can't
# overload interactive desktop applications. This file
# contains the processe's group ID as well as the groups nice value.


auxv
# https://man7.org/linux/man-pages/man5/proc.5.html
# This contains the contents of the ELF interpreter
# information passed to the process at exec time.  The
# format is one unsigned long ID plus one unsigned long
# value for each entry.  The last entry contains two zeros.
# See also getauxval(3).

cgroup
# https://man7.org/linux/man-pages/man7/cgroups.7.html
# This file describes control groups to which the process
# with the corresponding PID belongs.  The displayed
# information differs for cgroups version 1 and version 2
# hierarchies.

clear_refs
# https://man7.org/linux/man-pages/man5/proc.5.html
# This is a write-only file, writable only by owner of the process.


cmdline
# https://man7.org/linux/man-pages/man5/proc.5.html
# This read-only file holds the complete command line for
the process, unless the process is a zombie.  In the
latter case, there is nothing in this file: that is, a
read on this file will return 0 characters.  The command-
line arguments appear in this file as a set of strings
separated by null bytes ('\0'), with a further null byte
after the last string.

comm
https://man7.org/linux/man-pages/man5/proc.5.html
This file exposes the process's comm valueâ€”that is, the
command name associated with the process.  Different
threads in the same process may have different comm
values, accessible via /proc/[pid]/task/[tid]/comm.  A
thread may modify its comm value, or that of any of other
thread in the same thread group (see the discussion of
CLONE_THREAD in clone(2)), by writing to the file
/proc/self/task/[tid]/comm.  Strings longer than
TASK_COMM_LEN (16) characters (including the terminating
null byte) are silently truncated.



coredump_filter
https://man7.org/linux/man-pages/man5/core.5.html
/proc/[pid]/coredump_filter file can be used to control which
memory segments are written to the core dump file in the event
that a core dump is performed for the process with the
corresponding process ID.
The value in the file is a bit mask of memory mapping types (see
mmap(2)).  If a bit is set in the mask, then memory mappings of
the corresponding type are dumped; otherwise they are not dumped.


cpu_resctrl_groups
https://patchwork.kernel.org/project/linux-fsdevel/patch/20200110070608.18902-1-yu.c.chen@intel.com/
Monitoring tools that want to find out which resctrl control
and monitor groups a task belongs to must currently read
the "tasks" file in every group until they locate the process
ID.
Add an additional file /proc/{pid}/cpu_resctrl to provide this
information.


cpuset
https://man7.org/linux/man-pages/man7/cpuset.7.html
each process has a pseudo-file, /proc/<pid>/cpuset,
that displays the path of the process's cpuset directory relative
to the root of the cpuset filesystem.

cwd
https://man7.org/linux/man-pages/man5/proc.5.html
This is a symbolic link to the current working directory of the process.


environ
https://man7.org/linux/man-pages/man5/proc.5.html
This file contains the initial environment that was set
when the currently executing program was started via
execve(2).  The entries are separated by null bytes
('\0'), and there may be a null byte at the end. 

exe
this file is a symbolic link
containing the actual pathname of the executed command.
https://man7.org/linux/man-pages/man5/proc.5.html

fd
https://man7.org/linux/man-pages/man5/proc.5.html
This is a subdirectory containing one entry for each file
which the process has open, named by its file descriptor,
and which is a symbolic link to the actual file.  Thus, 0
is standard input, 1 standard output, 2 standard error, and so on.


fdinfo
https://man7.org/linux/man-pages/man5/proc.5.html
This is a subdirectory containing one entry for each file
which the process has open, named by its file descriptor.
The files in this directory are readable only by the owner
of the process.  The contents of each file can be read to
obtain information about the corresponding file
descriptor.  The content depends on the type of file
referred to by the corresponding file descriptor.
For regular files and directories, we see something like:
  $ cat /proc/12015/fdinfo/4
  pos:    1000
  flags:  01002002
  mnt_id: 21
(there are a *lot* of potential values that could be included here, they vary on the file type)


gid_map
https://man7.org/linux/man-pages/man7/user_namespaces.7.html
User and group ID mappings: uid_map and gid_map
When a user namespace is created, it starts out without a mapping
of user IDs (group IDs) to the parent user namespace.  The
/proc/[pid]/uid_map and /proc/[pid]/gid_map files (available
since Linux 3.5) expose the mappings for user and group IDs
inside the user namespace for the process pid.  These files can
be read to view the mappings in a user namespace and written to
(once) to define the mappings.

io
https://man7.org/linux/man-pages/man5/proc.5.html
This file contains I/O statistics for the process, for
example:
# cat /proc/3828/io
rchar: 323934931
wchar: 323929600
syscr: 632687
syscw: 632675
read_bytes: 0
write_bytes: 323932160
cancelled_write_bytes: 0



limits
https://man7.org/linux/man-pages/man5/proc.5.html
This file displays the soft limit, hard limit, and units
of measurement for each of the process's resource limits


loginuid
https://www.kernel.org/doc/Documentation/ABI/stable/procfs-audit_loginuid
The /proc/$pid/sessionid pseudofile is read to get the
audit login session ID of process $pid as a decimal
unsigned int (%u, u32).  It is set automatically,
serially assigned with each new login.


map_files
https://man7.org/linux/man-pages/man5/proc.5.html
This subdirectory contains entries corresponding to
memory-mapped files (see mmap(2)).  Entries are named by
memory region start and end address pair (expressed as
hexadecimal numbers), and are symbolic links to the mapped
files themselves. 

maps
https://man7.org/linux/man-pages/man5/proc.5.html
A file containing the currently mapped memory regions and
their access permissions. 

mem
https://man7.org/linux/man-pages/man5/proc.5.html
This file can be used to access the pages of a process's
memory through open(2), read(2), and lseek(2).


mountinfo
https://man7.org/linux/man-pages/man5/proc.5.html
This file contains information about mounts in the
process's mount namespace (see mount_namespaces(7)).  It
supplies various information (e.g., propagation state,
root of mount for bind mounts, identifier for each mount
and its parent) that is missing from the (older)
/proc/[pid]/mounts file, and fixes various other problems
with that file (e.g., nonextensibility, failure to
distinguish per-mount versus per-superblock options).

mounts
https://man7.org/linux/man-pages/man5/proc.5.html
This file lists all the filesystems currently mounted in
the process's mount namespace (see mount_namespaces(7)).
                            

mountstats
https://man7.org/linux/man-pages/man5/proc.5.html
This file exports information (statistics, configuration
information) about the mounts in the process's mount
namespace (....) Currently (as at Linux 2.6.26), only NFS filesystems
export statistics information via this field.

net
Directory containging a *lot* of hard to immediately decypher stats. Potentially very
useful but hard to tease out what's important w/o more than a casuaul glance.
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/deployment_guide/s2-proc-dir-net


ns
https://man7.org/linux/man-pages/man5/proc.5.html
This is a subdirectory containing one entry for each
namespace that supports being manipulated by setns(2).

numa_maps
https://man7.org/linux/man-pages/man5/proc.5.html
This file displays information about a process's NUMA memory
policy and allocation.

oom_adj
https://man7.org/linux/man-pages/man5/proc.5.html
This file can be used to adjust the score used to select
which process should be killed in an out-of-memory (OOM)
situation.

oom_score
https://man7.org/linux/man-pages/man5/proc.5.html
This file displays the current score that the kernel gives
to this process for the purpose of selecting a process for
the OOM-killer.


oom_score_adj
https://man7.org/linux/man-pages/man5/proc.5.html
This file can be used to adjust the badness heuristic used
to select which process gets killed in out-of-memory
conditions.

pagemap
https://man7.org/linux/man-pages/man5/proc.5.html
This file shows the mapping of each of the process's
virtual pages into physical page frames or swap area.


patch_state
Not finding any clear documentation.


personality
https://man7.org/linux/man-pages/man5/proc.5.html
This read-only file exposes the process's execution
domain, as set by personality(2).  The value is displayed
in hexadecimal notation.



projid_map
https://man7.org/linux/man-pages/man7/user_namespaces.7.html
Similarly to user and group ID mappings, it is possible to create
project ID mappings for a user namespace.  (Project IDs are used
for disk quotas; see setquota(8) and quotactl(2).)
Project ID mappings are defined by writing to the
/proc/[pid]/projid_map file (present since Linux 3.7).



root -> /
https://man7.org/linux/man-pages/man5/proc.5.html
UNIX and Linux support the idea of a per-process root of
the filesystem, set by the chroot(2) system call.  This
file is a symbolic link that points to the process's root
directory, and behaves in the same way as exe, and fd/*.

sched
# Little formal docuemntation:
https://lwn.net/Articles/242900/

schedstat
https://docs.kernel.org/scheduler/sched-stats.html
schedstats also adds a new /proc/<pid>/schedstat file to include some of the same information on a per-process level. There are three fields in this file correlating for that process to:
time spent on the cpu (in nanoseconds)
time spent waiting on a runqueue (in nanoseconds)
# of timeslices run on this cpu

sessionid
https://patchwork.kernel.org/project/linux-audit/patch/0e77d290bb50232d9ec9317645106f1330bd2d54.1616008065.git.rgb@redhat.com/
Not much documentation, but maybe included in stat output?

setgroups
https://man7.org/linux/man-pages/man7/user_namespaces.7.html
The /proc/[pid]/setgroups file displays the string "allow" if
processes in the user namespace that contains the process pid are
permitted to employ the setgroups(2) system call;



smaps
https://man7.org/linux/man-pages/man5/proc.5.html
This file shows memory consumption for each of the
process's mappings.

smaps_rollup
https://www.kernel.org/doc/Documentation/ABI/testing/procfs-smaps_rollup
This file provides pre-summed memory information for a
process.  The format is almost identical to /proc/pid/smaps,
except instead of an entry for each VMA in a process,
smaps_rollup has a single entry (tagged "[rollup]")
for which each field is the sum of the corresponding
fields from all the maps in /proc/pid/smaps.

stack
https://man7.org/linux/man-pages/man5/proc.5.html
This file provides a symbolic trace of the function calls
in this process's kernel stack.

stat (potentially *very* useful)
https://man7.org/linux/man-pages/man5/proc.5.html
Status information about the process.  This is used by ps(1).

statm 
https://man7.org/linux/man-pages/man5/proc.5.html
Provides information about memory usage, measured in
pages.

status (same as stat but includes named fields)
https://man7.org/linux/man-pages/man5/proc.5.html
Provides much of the information in /proc/[pid]/stat and
/proc/[pid]/statm in a format that's easier for humans to
parse. 


syscall
https://man7.org/linux/man-pages/man5/proc.5.html
(same as stat but includes named fields)
This file exposes the system call number and argument
registers for the system call currently being executed by
the process, followed by the values of the stack pointer
and program counter registers.  The values of all six
argument registers are exposed, although most system calls
use fewer registers.

task
https://man7.org/linux/man-pages/man5/proc.5.html
This is a directory that contains one subdirectory for
each thread in the process.  The name of each subdirectory
is the numerical thread ID ([tid]) of the thread (see
gettid(2)).
Within each of these subdirectories, there is a set of
files with the same names and contents as under the
/proc/[pid] directories. 


timens_offsets
https://man.archlinux.org/man/time_namespaces.7.en
Associated with each time namespace are offsets, expressed with respect to the initial time namespace, that define the values of the monotonic and boot-time clocks in that namespace. These offsets are exposed via the file /proc/PID/timens_offsets. Within this file, the offsets are expressed as lines consisting of three space-delimited fields:
<clock-id> <offset-secs> <offset-nanosecs>


timers
https://man7.org/linux/man-pages/man5/proc.5.html
/proc/[pid]/timers (since Linux 3.10)
A list of the POSIX timers for this process.  Each timer
is listed with a line that starts with the string "ID:".


timerslack_ns
https://man7.org/linux/man-pages/man5/proc.5.html
This file exposes the process's "current" timer slack
value, expressed in nanoseconds.  The file is writable,
allowing the process's timer slack value to be changed.

uid_map
https://man7.org/linux/man-pages/man7/user_namespaces.7.html
When a user namespace is created, it starts out without a mapping
of user IDs (group IDs) to the parent user namespace.  The
/proc/[pid]/uid_map and /proc/[pid]/gid_map files (available
since Linux 3.5) expose the mappings for user and group IDs
inside the user namespace for the process pid.

wchan
https://man7.org/linux/man-pages/man5/proc.5.html
The symbolic name corresponding to the location in the
kernel where the process is sleeping.
